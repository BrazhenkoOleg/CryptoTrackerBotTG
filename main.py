import telebot
from datetime import datetime
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from deep_translator import GoogleTranslator
from utils.db_manager import init_db, insert_crypto_price, get_recent_prices
from utils.crypto_tracker import get_crypto_price
from config import BOT_TOKEN, SUPPORTED_CRYPTOCURRENCIES, SUPPORTED_CURRENCIES

bot = telebot.TeleBot(BOT_TOKEN)
user_settings = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, –≤–∞–ª—é—Ç–∞)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, lang_code):
    try:
        return GoogleTranslator(source='auto', target=lang_code).translate(text)
    except Exception as e:
        print(f"Translation error: {e}")
        return text

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
init_db()

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
def create_settings_menu(lang_code='en'):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton(translate_text("üí∞ –í—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", lang_code)),
        KeyboardButton(translate_text("üíµ –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", lang_code))
    )
    markup.add(
        KeyboardButton(translate_text("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", lang_code)),
        KeyboardButton(translate_text("üìà –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É", lang_code))
    )
    return markup

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user_language_code = message.from_user.language_code
    lang_code = user_language_code if user_language_code else 'en'
    user_settings[user_id] = {'language': lang_code, 'crypto': 'BTC', 'currency': 'USD'}
    bot.send_message(
        message.chat.id,
        translate_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", lang_code),
        reply_markup=create_settings_menu(lang_code)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: True)
def handle_settings(message):
    user_id = message.from_user.id
    lang_code = user_settings[user_id]['language']
    
    if message.text == translate_text("üí∞ –í—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", lang_code):
        bot.send_message(message.chat.id, translate_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", lang_code), reply_markup=create_crypto_keyboard(lang_code))
    elif message.text == translate_text("üíµ –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", lang_code):
        bot.send_message(message.chat.id, translate_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", lang_code), reply_markup=create_currency_keyboard(lang_code))
    elif message.text == translate_text("üìà –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É", lang_code):
        get_price(message)
    elif message.text == translate_text("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", lang_code):
        show_history(message)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def create_crypto_keyboard(lang_code):
    markup = InlineKeyboardMarkup()
    for crypto in SUPPORTED_CRYPTOCURRENCIES:
        button = InlineKeyboardButton(crypto, callback_data=f"crypto_{crypto}")
        markup.add(button)
    return markup

# –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("crypto_"))
def choose_crypto(call):
    crypto = call.data.split('_')[1]
    user_id = call.from_user.id
    user_settings[user_id]['crypto'] = crypto
    lang_code = user_settings[user_id]['language']
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, translate_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞!", lang_code), reply_markup=create_settings_menu(lang_code))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
def create_currency_keyboard(lang_code):
    markup = InlineKeyboardMarkup()
    for currency_code in SUPPORTED_CURRENCIES:
        button = InlineKeyboardButton(currency_code, callback_data=f"currency_{currency_code}")
        markup.add(button)
    return markup

# –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("currency_"))
def choose_currency(call):
    currency_code = call.data.split('_')[1]
    user_id = call.from_user.id
    user_settings[user_id]['currency'] = currency_code
    lang_code = user_settings[user_id]['language']
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, translate_text("–í–∞–ª—é—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞!", lang_code), reply_markup=create_settings_menu(lang_code))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /price
@bot.message_handler(commands=['price'])
@bot.message_handler(func=lambda message: message.text == "üìà –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
def get_price(message):
    user_id = message.from_user.id
    settings = user_settings.get(user_id, {'language': 'en', 'crypto': 'BTC', 'currency': 'USD'})
    lang_code = settings['language']
    crypto = settings['crypto']
    currency = settings['currency']
    
    price = get_crypto_price(crypto, currency)
    if price is not None:
        message_text = f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {crypto}: {price} {currency}"
        bot.send_message(message.chat.id, translate_text(message_text, lang_code))
        insert_crypto_price(user_id, crypto, currency, price)
    else:
        error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        bot.send_message(message.chat.id, translate_text(error_message, lang_code))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø—Ä–æ—Å–æ–≤
def show_history(message):
    user_id = message.from_user.id
    lang_code = user_settings[user_id]['language']
    history = get_recent_prices(user_id)

    if history:
        history_text = translate_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:", lang_code) + "\n"
        for crypto, currency, price, timestamp in history:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            timestamp_str = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m.%Y %H:%M:%S")
            history_text += f"{crypto} -> {price:.2f} {currency}\n" + translate_text("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", lang_code) + f" {timestamp_str}\n\n"
        
        bot.send_message(message.chat.id, history_text)
    else:
        bot.send_message(message.chat.id, translate_text("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.", lang_code))

if __name__ == "__main__":
    bot.polling(none_stop=True)
